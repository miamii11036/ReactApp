{"ast":null,"code":"import React from\"react\";/*\n1. 熟悉Context API的使用\n2. 將使用者輸入的內容傳給子元件\n*///建立一個Context物件\nimport{jsx as _jsx}from\"react/jsx-runtime\";const MealsContext=/*#__PURE__*/React.createContext();//要傳遞的值\nconst todaysMeals=[\"起司蛋餅\",\"松露牛肝菌燉飯\",\"鮪魚起司薄餅\"];//建立Provider元件\nconst MealsProvider=function(_ref){let{children}=_ref;const[meals,setMealsList]=React.useState(todaysMeals);//將預設的內容傳給子元件\n//讀取使用者輸入的內容並傳給子元件\nconst toggleMeal=function(e){let newMeals=e.target.value;setMealsList(newMeals.split(\",\"));};return(/*#__PURE__*///MealsContext.Provider會將meals作為value提供給Context\n//value={{meals}} 表示 任何使用 MealsContext 的元件 都能夠讀取 meals 這個狀態\n_jsx(MealsContext.Provider,{value:{meals,toggleMeal},children:children})//.Provider是Context物件的屬性之一，使用{{}}傳遞物件，而{}傳遞陣列\n);};//建立自訂的hook，封裝React.useContext(MealsContext)\n//其他元件可直接存取MealsContext，不需在使用React.useContext\nexport const useMealsListContext=()=>React.useContext(MealsContext);export default MealsProvider;","map":{"version":3,"names":["React","jsx","_jsx","MealsContext","createContext","todaysMeals","MealsProvider","_ref","children","meals","setMealsList","useState","toggleMeal","e","newMeals","target","value","split","Provider","useMealsListContext","useContext"],"sources":["/root/mealcounter/src/MealList/MealProvider.js"],"sourcesContent":["import React from \"react\";\n\n/*\n1. 熟悉Context API的使用\n2. 將使用者輸入的內容傳給子元件\n*/\n\n//建立一個Context物件\nconst MealsContext = React.createContext();\n\n//要傳遞的值\nconst todaysMeals = [\"起司蛋餅\", \"松露牛肝菌燉飯\", \"鮪魚起司薄餅\"];\n\n//建立Provider元件\nconst MealsProvider = function({children}) {\n    const [meals, setMealsList] = React.useState(todaysMeals); //將預設的內容傳給子元件\n\n    //讀取使用者輸入的內容並傳給子元件\n    const toggleMeal = function(e) {\n        let newMeals = e.target.value\n        setMealsList(newMeals.split(\",\"));\n    }\n    \n    return (\n        //MealsContext.Provider會將meals作為value提供給Context\n        //value={{meals}} 表示 任何使用 MealsContext 的元件 都能夠讀取 meals 這個狀態\n        <MealsContext.Provider value={{meals, toggleMeal}}> \n            {children}\n        </MealsContext.Provider>\n        //.Provider是Context物件的屬性之一，使用{{}}傳遞物件，而{}傳遞陣列\n    )\n}\n//建立自訂的hook，封裝React.useContext(MealsContext)\n//其他元件可直接存取MealsContext，不需在使用React.useContext\nexport const useMealsListContext = () => React.useContext(MealsContext);\n\nexport default MealsProvider"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA;AACA;AACA,EAEA;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,YAAY,cAAGH,KAAK,CAACI,aAAa,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAC,WAAW,CAAG,CAAC,MAAM,CAAE,SAAS,CAAE,QAAQ,CAAC,CAEjD;AACA,KAAM,CAAAC,aAAa,CAAG,QAAAA,CAAAC,IAAA,CAAqB,IAAZ,CAACC,QAAQ,CAAC,CAAAD,IAAA,CACrC,KAAM,CAACE,KAAK,CAAEC,YAAY,CAAC,CAAGV,KAAK,CAACW,QAAQ,CAACN,WAAW,CAAC,CAAE;AAE3D;AACA,KAAM,CAAAO,UAAU,CAAG,QAAAA,CAASC,CAAC,CAAE,CAC3B,GAAI,CAAAC,QAAQ,CAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAC7BN,YAAY,CAACI,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CACrC,CAAC,CAED,oBACI;AACA;AACAf,IAAA,CAACC,YAAY,CAACe,QAAQ,EAACF,KAAK,CAAE,CAACP,KAAK,CAAEG,UAAU,CAAE,CAAAJ,QAAA,CAC7CA,QAAQ,CACU,CACvB;AAAA,EAER,CAAC,CACD;AACA;AACA,MAAO,MAAM,CAAAW,mBAAmB,CAAGA,CAAA,GAAMnB,KAAK,CAACoB,UAAU,CAACjB,YAAY,CAAC,CAEvE,cAAe,CAAAG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}