{"ast":null,"code":"var _jsxFileName = \"/root/mealcounter/src/MealList/MealProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from \"react\";\n\n//建立一個Context物件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MealsContext = /*#__PURE__*/React.createContext();\n\n//要傳遞的值\nconst todaysMeals = [\"起司蛋餅\", \"松露牛肝菌燉飯\", \"鮪魚起司薄餅\"];\n\n//建立Provider元件\nconst MealsProvider = function ({\n  children\n}) {\n  _s();\n  const [meals, setMealsList] = React.useState(todaysMeals);\n  const toggleMeal = function (e) {\n    let newMeals = e.target.value;\n    setMealsList(newMeals.split(\",\"));\n  };\n  return (\n    /*#__PURE__*/\n    //MealsContext.Provider會將meals作為value提供給Context\n    //value={{meals}} 表示 任何使用 MealsContext 的元件 都能夠讀取 meals 這個狀態\n    _jsxDEV(MealsContext.Provider, {\n      value: {\n        meals,\n        toggleMeal\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n    //.Provider是Context物件的屬性之一，使用{{}}傳遞物件，而{}傳遞陣列\n  );\n};\n//建立自訂的hook，封裝React.useContext(MealsContext)\n//其他元件可直接存取MealsContext，不需在使用React.useContext\n_s(MealsProvider, \"GeTg3agdodZRv2VuWqie2WAwNIA=\");\n_c = MealsProvider;\nexport const useMealsListContext = () => {\n  _s2();\n  return React.useContext(MealsContext);\n};\n_s2(useMealsListContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default MealsProvider;\nvar _c;\n$RefreshReg$(_c, \"MealsProvider\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MealsContext","createContext","todaysMeals","MealsProvider","children","_s","meals","setMealsList","useState","toggleMeal","e","newMeals","target","value","split","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMealsListContext","_s2","useContext","$RefreshReg$"],"sources":["/root/mealcounter/src/MealList/MealProvider.js"],"sourcesContent":["import React from \"react\";\n\n//建立一個Context物件\nconst MealsContext = React.createContext();\n\n//要傳遞的值\nconst todaysMeals = [\"起司蛋餅\", \"松露牛肝菌燉飯\", \"鮪魚起司薄餅\"];\n\n//建立Provider元件\nconst MealsProvider = function({children}) {\n    const [meals, setMealsList] = React.useState(todaysMeals);\n\n    const toggleMeal = function(e) {\n        let newMeals = e.target.value\n        setMealsList(newMeals.split(\",\"));\n    }\n    \n    return (\n        //MealsContext.Provider會將meals作為value提供給Context\n        //value={{meals}} 表示 任何使用 MealsContext 的元件 都能夠讀取 meals 這個狀態\n        <MealsContext.Provider value={{meals, toggleMeal}}> \n            {children}\n        </MealsContext.Provider>\n        //.Provider是Context物件的屬性之一，使用{{}}傳遞物件，而{}傳遞陣列\n    )\n}\n//建立自訂的hook，封裝React.useContext(MealsContext)\n//其他元件可直接存取MealsContext，不需在使用React.useContext\nexport const useMealsListContext = () => React.useContext(MealsContext);\n\nexport default MealsProvider"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGH,KAAK,CAACI,aAAa,CAAC,CAAC;;AAE1C;AACA,MAAMC,WAAW,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC;;AAEjD;AACA,MAAMC,aAAa,GAAG,SAAAA,CAAS;EAACC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,YAAY,CAAC,GAAGV,KAAK,CAACW,QAAQ,CAACN,WAAW,CAAC;EAEzD,MAAMO,UAAU,GAAG,SAAAA,CAASC,CAAC,EAAE;IAC3B,IAAIC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC7BN,YAAY,CAACI,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC;EACrC,CAAC;EAED;IAAA;IACI;IACA;IACAf,OAAA,CAACC,YAAY,CAACe,QAAQ;MAACF,KAAK,EAAE;QAACP,KAAK;QAAEG;MAAU,CAAE;MAAAL,QAAA,EAC7CA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACU;IACvB;EAAA;AAER,CAAC;AACD;AACA;AAAAd,EAAA,CAlBMF,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAmBnB,OAAO,MAAMkB,mBAAmB,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzB,KAAK,CAAC0B,UAAU,CAACvB,YAAY,CAAC;AAAA;AAACsB,GAAA,CAA3DD,mBAAmB;AAEhC,eAAelB,aAAa;AAAA,IAAAiB,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}